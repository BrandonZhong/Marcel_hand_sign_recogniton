import os
import random
import skimage.data
import skimage.transform
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf

# 运行图形嵌入到notebook中
##%matplotlib inline

###################################加载数据集#######################################
def load_data(data_dir):
    """Loads a data set and returns two lists:

    images: a list of Numpy arrays, each representing an image.
    labels: a list of numbers that represent the images labels.
    """
    # Get all subdirectories of data_dir. Each represents a label.
    #获得data_dir的所有子目录，每个代表一个标签
    directories = [d for d in os.listdir(data_dir) 
                   if os.path.isdir(os.path.join(data_dir, d))]
    # Loop through the label directories and collect the data in
    # two lists, labels and images.
    #通过标签目录循环，并且收集labels\images两个列表中的数据
    labels = []
    images = []
    for d in directories:
        label_dir = os.path.join(data_dir, d)
        file_names = [os.path.join(label_dir, f) 
                      for f in os.listdir(label_dir) if f.endswith(".ppm")]
        # For each label, load it's images and add them to the images list.
        #对于每个标签，加载其图像并将其添加到图片列表中
        # And add the label number (i.e. directory name) to the labels list.
        #将标签号添加到标签列表中
        for f in file_names:
            images.append(skimage.data.imread(f))
            labels.append(int(d))
    return images, labels

##加载数据集，数据集所在位置F:\datasets\T_Marcel
# 测试集所在位置F:\datasets\T_Marcel\Test
#训练集所在位置F:\datasets\T_Marcel\Test
ROOT_PATH = "F:"
train_data_dir = os.path.join(ROOT_PATH, "/datasets/T_Marcel/Train")
test_data_dir = os.path.join(ROOT_PATH, "/datasets/T_Marcel/Test")

images, labels = load_data(train_data_dir)


print("Unique Labels: {0}\nTotal Images: {1}".
      format(len(set(labels)), len(images)))

###################################加载数据集end#######################################

#########################随机显示数据集中的40张图片##########################################
def display_sample_images(images,labels):
    sample_indexes = random.sample(range(len(images)), 40)
    sample_images = [images[i] for i in sample_indexes]
    sample_labels = [labels[i] for i in sample_indexes]
    plt.figure(figsize=(15, 10))
    for i in range(len(sample_images)):
        truth = sample_labels[i]
        plt.subplot(7, 6,1+i)
        plt.axis('off')
        color='red'
        plt.text(40, 10, "   {0}".format(truth), 
             fontsize=12, color=color)
        plt.imshow(sample_images[i])
    plt.show()
display_sample_images(images,labels)
##############################显示数据集end###########################################

##############################图片预处理#############################################

######查看原图像大小——————、
for image in images[:5]:
    print("shape: {0}, min: {1}, max: {2}".format(image.shape, image.min(), image.max()))

####### 调整图像
images32 = [skimage.transform.resize(image, (32, 32),mode='reflect') for image in images]
##display_images_and_labels(images32, labels)

######查看图像尺寸——————
for image in images32[:5]:
    print("shape: {0}, min: {1}, max: {2}".format(image.shape, image.min(), image.max()))
##############################图片预处理end#############################################

#############################最小可行模型############################################# 
labels_a = np.array(labels)
images_a = np.array(images32)
print("labels: ", labels_a.shape, "\nimages: ", images_a.shape)

# Create a graph to hold the model.
#创建图
graph = tf.Graph()

# Create model in the graph.
with graph.as_default():
    # Placeholders for inputs and labels.
    #输入层
    images_ph = tf.placeholder(tf.float32, [None, 32, 32, 3])
    labels_ph = tf.placeholder(tf.int32, [None])

    # Flatten input from: [None, height, width, channels]
    # To: [None, height * width * channels] == [None, 3072]
    #改变图片形状
    images_flat = tf.contrib.layers.flatten(images_ph)

    # Fully connected layer. 
    # Generates logits of size [None, 62]
    #全连接层

    logits = tf.contrib.layers.fully_connected(images_flat,62,tf.nn.relu)
    # Convert logits to label indexes (int).
    # Shape [None], which is a 1D vector of length == batch_size.
    #输出标签
    predicted_labels = tf.argmax(logits, 1)
    
    # Define the loss function. 
    # Cross-entropy is a good choice for classification.
    loss = tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits, labels_ph))

    # Create training op.
    train = tf.train.AdamOptimizer(learning_rate=0.01).minimize(loss)
  
    # And, finally, an initialization op to execute before training.
    # TODO: rename to tf.global_variables_initializer() on TF 0.12.
    init = tf.initialize_all_variables()

print("images_flat: ", images_flat)
print("logits: ", logits)
print("loss: ", loss)
print("predicted_labels: ", predicted_labels)
#############################最小可行模型end#############################################
##########################    训练   #############################################

# Create a session to run the graph we created.
session = tf.Session(graph=graph)

# First step is always to initialize all variables. 
# We don't care about the return value, though. It's None.
_ = session.run([init])


for i in range(201):
    _, loss_value = session.run([train, loss], 
                                feed_dict={images_ph: images_a, labels_ph: labels_a})
    if i % 10 == 0:
        print("Loss: ", loss_value)
##########################    训练 end  #############################################      
############################## 预测  ############################################
# Pick 10 random images
sample_indexes = random.sample(range(len(images32)), 10)
sample_images = [images32[i] for i in sample_indexes]
sample_labels = [labels[i] for i in sample_indexes]

# Run the "predicted_labels" op.
predicted = session.run([predicted_labels], 
                        feed_dict={images_ph: sample_images})[0]
##print(sample_labels)
##print(predicted)

# Display the predictions and the ground truth visually.
fig = plt.figure(figsize=(10, 10))
for i in range(len(sample_images)):
    truth = sample_labels[i]
    prediction = predicted[i]
    plt.subplot(5, 2,1+i)
    plt.axis('off')
    color='green' if truth == prediction else 'red'
    plt.text(40, 10, "Truth:        {0}\nPrediction: {1}".format(truth, prediction), 
             fontsize=12, color=color)
    plt.imshow(sample_images[i])
plt.show()

############################  评估 ################################################
# Load the test dataset.
test_images, test_labels = load_data(test_data_dir)

# Transform the images, just like we did with the training set.
test_images32 = [skimage.transform.resize(image, (32, 32),mode='reflect')
                 for image in test_images]
##display_images_and_labels(test_images32, test_labels)

# Run predictions against the full test set.
predicted = session.run([predicted_labels], 
                        feed_dict={images_ph:test_images32})[0]

# Calculate how many matches we got.
match_count = sum([int(y == y_) for y, y_ in zip(test_labels, predicted)])

accuracy = match_count / len(test_labels)


print("Accuracy: {:.3f}".format(accuracy))

session.close()

#########################  评估 end ####################################################
   

    
